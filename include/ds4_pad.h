//-----------------------------------------------------------------------------
// File : ds4_pad.h
// Desc : Dual Shock4 Game Pad Library.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <cstdint>

#ifdef LIB_DS4_AUTO_LINK
#pragma comment(lib, "hid.lib")
#pragma comment(lib, "setupapi.lib")
#endif//LIB_DS4_AUTO_LINK


//-----------------------------------------------------------------------------
// Type Definition.
//-----------------------------------------------------------------------------
struct PadHandle;
struct PadRawInput;


//-----------------------------------------------------------------------------
// Constant Value.
//-----------------------------------------------------------------------------
static const uint8_t kPadMaxTouchCount = 2;


///////////////////////////////////////////////////////////////////////////////
// PAD_CONNECTION_TYPE
///////////////////////////////////////////////////////////////////////////////
enum PAD_CONNECTION_TYPE
{
    PAD_CONNECTION_NONE,        //!< None.
    PAD_CONNECTION_USB,         //!< USB Wire.
    PAD_CONNECTION_BT,          //!< Bluetooth.
    PAD_CONNECTION_WIRELESS     //!< USB Wireless Adaptor.
};

///////////////////////////////////////////////////////////////////////////////
// PAD_BUTTON_OFFSET enum
///////////////////////////////////////////////////////////////////////////////
enum PAD_BUTTON_OFFSET
{
    PAD_BUTTON_L3        = 0x00000002,
    PAD_BUTTON_R3        = 0x00000004,
    PAD_BUTTON_OPTIONS   = 0x00000008,
    PAD_BUTTON_UP        = 0x00000010,
    PAD_BUTTON_RIGHT     = 0x00000020,
    PAD_BUTTON_DOWN      = 0x00000040,
    PAD_BUTTON_LEFT      = 0x00000080,
    PAD_BUTTON_L2        = 0x00000100,
    PAD_BUTTON_R2        = 0x00000200,
    PAD_BUTTON_L1        = 0x00000400,
    PAD_BUTTON_R1        = 0x00000800,
    PAD_BUTTON_TRIANGLE  = 0x00001000,
    PAD_BUTTON_CIRCLE    = 0x00002000,
    PAD_BUTTON_CROSS     = 0x00004000,
    PAD_BUTTON_SQUARE    = 0x00008000,
    PAD_BUTTON_TOUCH_PAD = 0x00100000,
    PAD_BUTTON_PS        = 0x80000000,
};

///////////////////////////////////////////////////////////////////////////////
// PadVector3 structure
///////////////////////////////////////////////////////////////////////////////]
struct PadVector3
{
    float   x;
    float   y;
    float   z;
};

///////////////////////////////////////////////////////////////////////////////
// PadQuaternion structure
///////////////////////////////////////////////////////////////////////////////
struct PadQuaternion
{
    float   x;
    float   y;
    float   z;
    float   w;
};

///////////////////////////////////////////////////////////////////////////////
// PadAnalogStick structure
///////////////////////////////////////////////////////////////////////////////
struct PadAnalogStick
{
    uint8_t     x;      //!< X成分(左端が0で，右端が255).
    uint8_t     y;      //!< Y成分(下端が0で，上端が255).
};

///////////////////////////////////////////////////////////////////////////////
// PadAnlogButtons structure
///////////////////////////////////////////////////////////////////////////////
struct PadAnalogButtons
{
    uint8_t     l2;     //!< L2トリガー.
    uint8_t     r2;     //!< R2トリガー.
};

///////////////////////////////////////////////////////////////////////////////
// PadVibrationParam structure
///////////////////////////////////////////////////////////////////////////////
struct PadVibrationParam
{
    uint8_t     largeMotor; //!< モーター左.
    uint8_t     smallMotor; //!< モーター右.
};

///////////////////////////////////////////////////////////////////////////////
// PadColor structure
///////////////////////////////////////////////////////////////////////////////
struct PadColor
{
    uint8_t     r;      //!< R成分.
    uint8_t     g;      //!< G成分.
    uint8_t     b;      //!< B成分.
};

///////////////////////////////////////////////////////////////////////////////
// PadTouch structure
///////////////////////////////////////////////////////////////////////////////
struct PadTouch
{
    uint16_t    x;      //!< X座標.
    uint16_t    y;      //!< Y座標.
    uint8_t     id;     //!< 識別番号.
};

///////////////////////////////////////////////////////////////////////////////
// PadTouchData structure
///////////////////////////////////////////////////////////////////////////////
struct PadTouchData
{
    uint8_t     count;                      //!< タッチ数.
    PadTouch    touch[kPadMaxTouchCount];   //!< タッチデータ.
};


///////////////////////////////////////////////////////////////////////////////
// PadState structure
///////////////////////////////////////////////////////////////////////////////
struct PadState
{
    PAD_CONNECTION_TYPE     type;               //!< 接続タイプ.
    PadAnalogStick          stickL;             //!< 左スティック.
    PadAnalogStick          stickR;             //!< 右スティック.
    uint32_t                buttons;            //!< ボタン.
    PadAnalogButtons        analogButtons;      //!< アナログボタン.
    //PadQuaternion           orientation;        //!< 向き.
    //PadVector3              acceleration;       //!< 加速度.
    //PadVector3              angularVelocity;    //!< 角速度.
    //PadTouchData            touchData;          //!< タッチパッドデータ.
};

///////////////////////////////////////////////////////////////////////////////
// PadRawInput structure
///////////////////////////////////////////////////////////////////////////////
struct PadRawInput
{
    PAD_CONNECTION_TYPE     type;
    uint8_t                 bytes[78];
};

//-----------------------------------------------------------------------------
//! @brief      初期化処理を行います.
//!
//! @retval true    初期化に成功.
//! @retval false   初期化に失敗.
//-----------------------------------------------------------------------------
bool PadInit();

//-----------------------------------------------------------------------------
//! @brief      終了処理を行います.
//-----------------------------------------------------------------------------
void PadTerm();

//-----------------------------------------------------------------------------
//! @brief      パッドを接続します.
//!
//! @param[in]      userId      ユーザーID.
//! @param[out]     pHandle     ハンドルの格納先です.
//! @retval true    接続に成功.
//! @retval false   接続に失敗.
//-----------------------------------------------------------------------------
bool PadOpen(PadHandle** ppHandle);

//-----------------------------------------------------------------------------
//! @brief      パッドを切断します.
//!
//! @param[in]      pHandle      パッドハンドル.
//! @retval true    切断に成功.
//! @retval false   切断に失敗.
//-----------------------------------------------------------------------------
bool PadClose(PadHandle*& pHandle);

//-----------------------------------------------------------------------------
//! @brief      パッド生データを読み取ります.
//!
//! @param[in]      pHandle     パッドハンドル.
//! @param[out]     pResult     パッド生データの格納先.
//! @retval true    読み取りに成功.
//! @retval false   読み取りに失敗.
//-----------------------------------------------------------------------------
bool PadRead(PadHandle* handle, PadRawInput* pResult);

//-----------------------------------------------------------------------------
//! @brief      パッド生データを扱いやすい形にマッピングします.
//!
//! @param[in]      pRawData        パッド生データ.
//! @param[out]     state           パッドデータ.
//! @retval true    マッピングに成功.
//! @retval false   マッピングに失敗.
//-----------------------------------------------------------------------------
bool PadMap(const PadRawInput* pRawData, PadState& state);

//-----------------------------------------------------------------------------
//! @brief      パッドデータを取得します.
//!
//! @param[in]      pHandle         パッドハンドル.
//! @param[out]     state           パッドデータの格納先.
//! @retval true    読み取りに成功.
//! @retval false   読み取りに失敗.
//-----------------------------------------------------------------------------
bool PadGetState(PadHandle* pHandle, PadState& state);

//-----------------------------------------------------------------------------
//! @brief      バイブレーションを設定します.
//!
//! @param[in]      handle      パッドハンドル.
//! @param[in]      pParam      バイブレーションデータ.
//! @retval true    設定に成功.
//! @retval false   設定に失敗.
//-----------------------------------------------------------------------------
bool PadSetVibration(PadHandle* handle, const PadVibrationParam* pParam);




